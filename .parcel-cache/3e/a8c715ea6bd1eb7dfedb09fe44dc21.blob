"use strict";

require("core-js/modules/web.immediate.js");

var model = _interopRequireWildcard(require("./model.js"));

var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));

var _searchView = _interopRequireDefault(require("./views/searchView.js"));

var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));

var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));

var _bookmarksView = _interopRequireDefault(require("./views/bookmarksView.js"));

var _addRecipeView = _interopRequireDefault(require("./views/addRecipeView.js"));

var _config = require("./config.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// polyfill async/await
// if (module.hot) module.hot.accept(); // only use in parcel
const controllRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;

    _recipeView.default.renderSpinner(); // 0. Update results view to mark selected search result


    _resultsView.default.update(model.getSearchResultsPage());

    _bookmarksView.default.update(model.state.bookmarks); // 1. Loading recipe


    await model.loadRecipe(id); // 2. Rendering recipe

    _recipeView.default.render(model.state.recipe);
  } catch (err) {
    _recipeView.default.renderError();
  }
};

const controlSearchResults = async function () {
  try {
    const query = _searchView.default.getQuery();

    if (!query) return;

    _resultsView.default.renderSpinner();

    await model.loadSearchResults(query); // resultsView.render(model.state.search.results); // all results

    _resultsView.default.render(model.getSearchResultsPage());

    _paginationView.default.render(model.state.search);
  } catch (err) {
    console.error(err);
  }
};

const controlPagination = function (gotoPage) {
  _resultsView.default.render(model.getSearchResultsPage(gotoPage));

  _paginationView.default.render(model.state.search);
};

const controlServings = function (newServing) {
  model.updateServings(newServing); // recipeView.render(model.state.recipe); // render entire view

  _recipeView.default.update(model.state.recipe); // only update part of DOM

};

const controlUpdateBookmark = function () {
  if (!model.state.recipe.bookmarked) model.addBookmark(model.state.recipe);else model.deleteBookmark(model.state.recipe.id);

  _recipeView.default.update(model.state.recipe);

  _bookmarksView.default.render(model.state.bookmarks);
};

const controlBookmarks = function () {
  _bookmarksView.default.render(model.state.bookmarks);
};

const controlAddRecipe = async function (newRecipe) {
  try {
    _addRecipeView.default.renderSpinner();

    await model.uploadRecipe(newRecipe);

    _recipeView.default.render(model.state.recipe);

    _addRecipeView.default.renderMessage();

    _bookmarksView.default.render(model.state.bookmarks); // Change ID in URL


    window.history.pushState(null, '', `#${model.state.recipe.id}`);
    setTimeout(function () {
      _addRecipeView.default.toggleWindow();
    }, _config.MODEL_CLOSE_SEC * 1000);
    setTimeout(function () {
      _addRecipeView.default.render(true);
    }, (_config.MODEL_CLOSE_SEC + 1) * 1000);
  } catch (err) {
    console.error(err);

    _addRecipeView.default.renderError(err.message);
  }
};

const init = function () {
  _bookmarksView.default.addHandlerRender(controlBookmarks);

  _recipeView.default.addHandlerRender(controllRecipes);

  _recipeView.default.addHandlerUpdateServing(controlServings);

  _recipeView.default.addHandlerAddBookmark(controlUpdateBookmark);

  _searchView.default.addHandlerSearch(controlSearchResults);

  _paginationView.default.addHandlerClick(controlPagination);

  _addRecipeView.default.addHandlerUpload(controlAddRecipe);
};

init();