"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _View = _interopRequireDefault(require("./View.js"));

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// parcel 2
class AddRecipeView extends _View.default {
  constructor() {
    super();

    _defineProperty(this, "_parentElement", document.querySelector('.upload'));

    _defineProperty(this, "_overlay", document.querySelector('.overlay'));

    _defineProperty(this, "_window", document.querySelector('.add-recipe-window'));

    _defineProperty(this, "_btnOpen", document.querySelector('.nav__btn--add-recipe'));

    _defineProperty(this, "_btnClose", document.querySelector('.btn--close-modal'));

    _defineProperty(this, "_message", 'Recipe was successfully uploaded!');

    this._addHandlerShowWindow();

    this._addHandlerHideWindow();
  }

  _generateMarkup() {
    return `
            <form class="upload">
                <div class="upload__column">
                    <h3 class="upload__heading">Recipe data</h3>
                    <label>Title</label>
                    <input required name="title" type="text" />
                    <label>URL</label>
                    <input required name="sourceUrl" type="text" />
                    <label>Image URL</label>
                    <input required name="image" type="text" />
                    <label>Publisher</label>
                    <input required name="publisher" type="text" />
                    <label>Prep time</label>
                    <input required name="cookingTime" type="number" />
                    <label>Servings</label>
                    <input required name="servings" type="number" />
                </div>

                <div class="upload__column">
                    <h3 class="upload__heading">Ingredients</h3>
                    <label>Ingredient 1</label>
                    <input type="text" required name="ingredient-1"
                    placeholder="Format: 'Quantity,Unit,Description'" />
                    <label>Ingredient 2</label>
                    <input type="text" name="ingredient-2" placeholder="Format: 'Quantity,Unit,Description'" />
                    <label>Ingredient 3</label>
                    <input type="text" name="ingredient-3" placeholder="Format: 'Quantity,Unit,Description'" />
                    <label>Ingredient 4</label>
                    <input type="text" name="ingredient-4" placeholder="Format: 'Quantity,Unit,Description'" />
                    <label>Ingredient 5</label>
                    <input type="text" name="ingredient-5" placeholder="Format: 'Quantity,Unit,Description'" />
                    <label>Ingredient 6</label>
                    <input type="text" name="ingredient-6" placeholder="Format: 'Quantity,Unit,Description'" />
                </div>

                <button class="btn upload__btn">
                    <svg>
                    <use href="${_icons.default}#icon-upload-cloud"></use>
                    </svg>
                    <span>Upload</span>
                </button>
            </form>
        `;
  }

  toggleWindow() {
    this._overlay.classList.toggle('hidden');

    this._window.classList.toggle('hidden');
  }

  _addHandlerShowWindow() {
    this._btnOpen.addEventListener('click', this.toggleWindow.bind(this));
  }

  _addHandlerHideWindow() {
    this._btnClose.addEventListener('click', this.toggleWindow.bind(this));

    this._overlay.addEventListener('click', this.toggleWindow.bind(this));
  }

  addHandlerUpload(handler) {
    this._parentElement.addEventListener('submit', function (e) {
      e.preventDefault();
      const dataArr = [...new FormData(this)];
      const data = Object.fromEntries(dataArr);
      handler(data);
    });
  }

}

var _default = new AddRecipeView();

exports.default = _default;